# -*- coding: utf-8 -*-
"""SpotifyAPI.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1G3UTuwJB4QoIhnRSIHcqMLJH3vvugpQ7
"""

pip install spotipy

import spotipy
from spotipy.oauth2 import SpotifyClientCredentials
import pandas as pd
from dotenv import load_dotenv
load_dotenv()

cid = os.environ.get('SPOTIPY_CLIENT_ID')
secret = os.environ.get('SPOTIPY_CLIENT_SECRET')
client_credentials_manager = SpotifyClientCredentials(client_id=cid, client_secret=secret)
sp = spotipy.Spotify(client_credentials_manager = client_credentials_manager)
rihanna_uri = 'spotify:artist:5pKCCKE2ajJHZ9KAiaK11H?si=ZM9pI-KfTaOb5vE0VcbcdQ'

playlists = sp.user_playlists('yaneholandaa')
playlists_df = pd.DataFrame(playlists)
playlists_df.head()

playlist_name = []
playlist_tracks = []


for i, x in playlists_df['items'].items():
        playlist_name.append(x['name'])
        playlist_tracks.append(x['tracks']['total'])


my_playlists = pd.DataFrame({
    'name':playlist_name,
    'total tracks':playlist_tracks})
    
my_playlists

#Searching for Rihanna's top tracks

top_tracks = sp.artist_top_tracks(rihanna_uri)

df = pd.DataFrame(top_tracks)
df.head()

track_id = []
track = []
duration = []
track_number = []

for i, x in df['tracks'].items():
        track.append(x['name'])
        duration.append(x['duration_ms'])
        track_number.append(x['track_number'])
        track_id.append(x['uri'])

df2 = pd.DataFrame({
    'track':track,
    'duration_ms':duration,
    'track_number':track_number,
    'track_id':track_id})
    
df2

# Searching for Rihanna's albums
album = []
album_id = []
total_tracks = []


results = sp.artist_albums(rihanna_uri, album_type='album')

df_albums = pd.DataFrame(results)

for i, x in df_albums['items'].items():
        album.append(x['name'])
        album_id.append(x['uri'])
        total_tracks.append(x['total_tracks'])
     

df3 = pd.DataFrame({
    'album':album,
    'album_id':album_id,
    'total_tracks':total_tracks})

df3.insert(1, 'artist', 'Rihanna')
df3

#Return only album's uris and name

albums_uris = df3['album_id']
df_albums_uris = albums_uris.values.tolist()
print(df_albums_uris)

albums_names = df3['album']

df_albums_names = albums_names.values.tolist()
print(df_albums_names)

# 3 top albums

albums_3 = ['ANTI (Deluxe)','Unapologetic (Deluxe Version)','Talk That Talk (Deluxe)']
uris_3 = ['spotify:album:4UlGauD7ROb3YbVOFMgW5u','spotify:album:7yjQZX94GxVyqDTehxBejk', 'spotify:album:5UDXzVwWnn3mDy3mTpQPYb']
df_3 = {'albums': albums_3, 'uri':uris_3}

top_albums = pd.DataFrame(data=df_3, columns=["albums","uri"])
top_albums.insert(1, 'artist', 'Rihanna')
top_albums

uris = 'spotify:album:4UlGauD7ROb3YbVOFMgW5u'
uri = []
name = []
track_number = []
disc_number = []


album_tracks = sp.album_tracks(uris)
df4 = pd.DataFrame(album_tracks)

for i, x in df4['items'].items():
  uri.append(x['uri'])
  name.append(x['name'])
  track_number.append(x['track_number'])
  disc_number.append(x['disc_number'])


df_unapologetic = pd.DataFrame({
'uri':uri,    
'name':name,
'track_number':track_number,
'disc_number':disc_number})

df_unapologetic.insert(1, 'artist', 'Rihanna')
df_unapologetic

#Put for the user to input the album uri

uris = 'spotify:album:7yjQZX94GxVyqDTehxBejk'
uri = []
name = []
track_number = []
disc_number = []


album_tracks = sp.album_tracks(uris)
df5 = pd.DataFrame(album_tracks)

for i, x in df5['items'].items():
  uri.append(x['uri'])
  name.append(x['name'])
  track_number.append(x['track_number'])
  disc_number.append(x['disc_number'])


df_anti = pd.DataFrame({
'uri':uri,    
'name':name,
'track_number':track_number,
'disc_number':disc_number})

df_anti.insert(1, 'artist', 'Rihanna')
df_anti

uris = 'spotify:album:5UDXzVwWnn3mDy3mTpQPYb'
uri = []
name = []
track_number = []
disc_number = []


album_tracks = sp.album_tracks(uris)
df6 = pd.DataFrame(album_tracks)

for i, x in df6['items'].items():
  uri.append(x['uri'])
  name.append(x['name'])
  track_number.append(x['track_number'])
  disc_number.append(x['disc_number'])


df_talk = pd.DataFrame({
'uri':uri,    
'name':name,
'track_number':track_number,
'disc_number':disc_number})

df_talk.insert(1, 'artist', 'Rihanna')
df_talk

# Get the top tracks' informations
uri = df2['track_id']

def getTopTrackFeatures(uri):
  song = sp.track(uri)
  song_features = sp.audio_features(uri)

  name = song['name']
  album = song['album']['name']
  artist = song['album']['artists'][0]['name']

  # features
  acousticness = song_features[0]['acousticness']
  danceability = song_features[0]['danceability']
  energy = song_features[0]['energy']
  duration = song_features[0]['duration_ms']

  track = [name, album, artist, acousticness, danceability, energy, duration]
  return track

tracks = []

for i in range(len(uri)):
  track = getTopTrackFeatures(uri[i])
  tracks.append(track)

# create dataset
df_tracks = pd.DataFrame(tracks, columns = ['name', 'album', 'artist', 'acousticness', 'danceability', 'energy', 'duration'])
df_tracks

from sqlalchemy import create_engine
import psycopg2 

conn_string = 'postgresql://{USER}:{PASSWORD}@localhost:5433/{database}'

final = df_tracks

db = create_engine(conn_string)
conn = db.connect()

final.to_sql('data', con=conn, if_exists='replace', index=False)
conn = psycopg2.connect(conn_string)
conn.autocommit = True
cursor = conn.cursor()
sqll = '''select * from data; '''
cursor.execute(sqll)
for i in cursor.fetchall():
    print(i)

#close connection
conn.close()

